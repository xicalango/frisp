(define reduce (lambda (fn accu elements)
  (if (endp elements)
    (accu)
    (reduce fn (fn accu (car elements)) (cdr elements))
  )
))

(define reverse (lambda (l)
  (if (endp l)
    (list)
    (concatenate (reverse (cdr l)) (list (car l)))
  )
))

(define sum-all (lambda (accu elements)
  (if (endp elements)
    (accu)
    (sum-all (+ accu (car elements)) (cdr elements))
  )
))

(define concatenate (lambda (l1 l2)
  (if (endp l1)
    (l2)
    (cons (car l1) (concatenate (cdr l1) l2))
  )
))

(define seq (lambda (n)
  (if (== n 0)
    (list)
    (cons n (seq (- n 1)))
  )
))

